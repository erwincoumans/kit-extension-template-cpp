#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (50000.200000002995, -1.1102274655173212e-11, 0)
                double radius = 500
            }
            dictionary Perspective = {
                double3 position = (2.7362002236085314, 7.988393413601967, 1.6965791234090506)
                double3 target = (-2.5115794669839375, -2.822318920537098, -0.5673916036836657)
            }
            dictionary Right = {
                double3 position = (0, -50006, -1.1103562513881116e-11)
                double radius = 500
            }
            dictionary Top = {
                double3 position = (0, 0, 50001.5)
                double radius = 500
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary omni_layer = {
            string authoring_layer = "./cartpole-multiple.usda"
            dictionary muteness = {
            }
        }
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            float3 "rtx:sceneDb:ambientLightColor" = (0.1, 0.1, 0.1)
        }
    }
    defaultPrim = "cartpole"
    metersPerUnit = 1
    upAxis = "Z"
)

def SphereLight "SphereLight"
{
    custom float inputs:intensity = 20000
    custom float inputs:radius = 1
    float intensity = 20000
    float radius = 1
    double3 xformOp:translate = (-0.5, 1, 1.5)
    uniform token[] xformOpOrder = ["xformOp:translate"]
}

def PhysicsScene "physicsScene" (
    prepend apiSchemas = ["CustomPhysicsAPI"]
)
{
    vector3f physics:gravityDirection = (0, 0, -1)
    float physics:gravityMagnitude = 9.81

    def Cube "Ground" (
        prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        bool physics:kinematicEnabled = 1
        rel physics:simulationOwner = </physicsScene>
        vector3f physics:velocity = (0, 0, 0)
        color3f[] primvars:displayColor = [(0.9, 0.6, 0.2)]
        double size = 1
        token visibility = "inherited"
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (10, 10, 0.02)
        float3 xformOp:translate = (0, 0, -1.5)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }
}

def Xform "cartpole"
{
    def Cube "rail" (
        prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsArticulationRootAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        rel physics:simulationOwner = </physicsScene>
        vector3f physics:velocity = (0, 0, 0)
        color3f[] primvars:displayColor = [(0.9, 0.6, 0.2)]
        double size = 1
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (0.05, 6, 0.05)
        float3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def Cube "cart" (
        prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        rel physics:simulationOwner = </physicsScene>
        vector3f physics:velocity = (0, 0, 0)
        color3f[] primvars:displayColor = [(0.3, 0.5, 0.7)]
        double size = 1
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (0.2, 0.25, 0.2)
        float3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def Cube "pole" (
        prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        rel physics:simulationOwner = </physicsScene>
        vector3f physics:velocity = (0, 0, 0)
        color3f[] primvars:displayColor = [(0.1, 0.1, 0.3)]
        double size = 1
        quatf xformOp:orient = (0.9961947, 0.08715549, 0, 0)
        float3 xformOp:scale = (0.025, 0.05, 1)
        float3 xformOp:translate = (0.11, -0.1, 0.5)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def PhysicsFixedJoint "rootJoint"
    {
        rel physics:body1 = </cartpole/rail>
    }

    def PhysicsPrismaticJoint "cartJoint"
    {
        uniform token physics:axis = "Y"
        rel physics:body0 = </cartpole/rail>
        rel physics:body1 = </cartpole/cart>
        float physics:lowerLimit = -3
        float physics:upperLimit = 3
    }

    def PhysicsRevoluteJoint "poleJoint"
    {
        uniform token physics:axis = "X"
        rel physics:body0 = </cartpole/cart>
        rel physics:body1 = </cartpole/pole>
        point3f physics:localPos0 = (0.55, 0, 0)
        point3f physics:localPos1 = (0, 0, -0.5)
        quatf physics:localRot0 = (1, 0, 0, 0)
        quatf physics:localRot1 = (1, 0, 0, 0)
    }
}

def Xform "cartpole_01"
{
    float3 xformOp:rotateXYZ = (0, 0, 0)
    float3 xformOp:scale = (1, 1, 1)
    double3 xformOp:translate = (1.9700592771738563, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

    def Cube "rail" (
        prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsArticulationRootAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        rel physics:simulationOwner = </physicsScene>
        vector3f physics:velocity = (0, 0, 0)
        color3f[] primvars:displayColor = [(0.9, 0.6, 0.2)]
        double size = 1
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (0.05, 6, 0.05)
        float3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def Cube "cart" (
        prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        rel physics:simulationOwner = </physicsScene>
        vector3f physics:velocity = (0, 0, 0)
        color3f[] primvars:displayColor = [(0.3, 0.5, 0.7)]
        double size = 1
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (0.2, 0.25, 0.2)
        float3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def Cube "pole" (
        prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        rel physics:simulationOwner = </physicsScene>
        vector3f physics:velocity = (0, 0, 0)
        color3f[] primvars:displayColor = [(0.1, 0.1, 0.3)]
        double size = 1
        quatf xformOp:orient = (0.9961947, 0.08715549, 0, 0)
        float3 xformOp:scale = (0.025, 0.05, 1)
        float3 xformOp:translate = (0.11, -0.1, 0.5)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def PhysicsFixedJoint "rootJoint"
    {
        rel physics:body1 = </cartpole_01/rail>
    }

    def PhysicsPrismaticJoint "cartJoint"
    {
        uniform token physics:axis = "Y"
        rel physics:body0 = </cartpole_01/rail>
        rel physics:body1 = </cartpole_01/cart>
        float physics:lowerLimit = -3
        float physics:upperLimit = 3
    }

    def PhysicsRevoluteJoint "poleJoint"
    {
        uniform token physics:axis = "X"
        rel physics:body0 = </cartpole_01/cart>
        rel physics:body1 = </cartpole_01/pole>
        point3f physics:localPos0 = (0.55, 0, 0)
        point3f physics:localPos1 = (0, 0, -0.5)
        quatf physics:localRot0 = (1, 0, 0, 0)
        quatf physics:localRot1 = (1, 0, 0, 0)
    }
}

def Xform "cartpole_02"
{
    float3 xformOp:rotateXYZ = (0, 0, 0)
    float3 xformOp:scale = (1, 1, 1)
    double3 xformOp:translate = (-2.5481117929709605, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

    def Cube "rail" (
        prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsArticulationRootAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        rel physics:simulationOwner = </physicsScene>
        vector3f physics:velocity = (0, 0, 0)
        color3f[] primvars:displayColor = [(0.9, 0.6, 0.2)]
        double size = 1
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (0.05, 6, 0.05)
        float3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def Cube "cart" (
        prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        rel physics:simulationOwner = </physicsScene>
        vector3f physics:velocity = (0, 0, 0)
        color3f[] primvars:displayColor = [(0.3, 0.5, 0.7)]
        double size = 1
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (0.2, 0.25, 0.2)
        float3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def Cube "pole" (
        prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        rel physics:simulationOwner = </physicsScene>
        vector3f physics:velocity = (0, 0, 0)
        color3f[] primvars:displayColor = [(0.1, 0.1, 0.3)]
        double size = 1
        quatf xformOp:orient = (0.9961947, 0.08715549, 0, 0)
        float3 xformOp:scale = (0.025, 0.05, 1)
        float3 xformOp:translate = (0.11, -0.1, 0.5)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def PhysicsFixedJoint "rootJoint"
    {
        rel physics:body1 = </cartpole_02/rail>
    }

    def PhysicsPrismaticJoint "cartJoint"
    {
        uniform token physics:axis = "Y"
        rel physics:body0 = </cartpole_02/rail>
        rel physics:body1 = </cartpole_02/cart>
        float physics:lowerLimit = -3
        float physics:upperLimit = 3
    }

    def PhysicsRevoluteJoint "poleJoint"
    {
        uniform token physics:axis = "X"
        rel physics:body0 = </cartpole_02/cart>
        rel physics:body1 = </cartpole_02/pole>
        point3f physics:localPos0 = (0.55, 0, 0)
        point3f physics:localPos1 = (0, 0, -0.5)
        quatf physics:localRot0 = (1, 0, 0, 0)
        quatf physics:localRot1 = (1, 0, 0, 0)
    }
}
